# "org" ensures this Service is used with the correct Serverless Framework Access Key.
org: taisgrupo6unsa
# "app" enables Serverless Framework Dashboard features and sharing them with other Services.
app: taisgrupo6examen2
# "service" is the name of this project. This will also be added to your AWS resource names.
service: register-product

stages:
  default:
    params:
      tableProductsName: "products-table-${sls:stage}"

plugins:
  - serverless-wsgi
  - serverless-python-requirements

custom:
  tableProductsName: 'products-table-${self:provider.stage}'
  wsgi:
    app: app.app
    packRequirements: false
  pythonRequirements:
    dockerizePip: non-linux

provider:
  name: aws
  apiName: products-api
  runtime: python3.12
  stage: dev
  region: us-east-1
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
            - lambda:InvokeFunction
          Resource:
            - Fn::GetAtt: [ProductsTable, Arn]
            - "*"
  environment:
    PRODUCTS_TABLE: ${param:tableProductsName}
    LAMBDA_NAME: validate-${self:provider.stage}-validateProduct

functions:
  createProduct:
    handler: wsgi_handler.handler
    events:
      - http:
          path: /products
          method: POST
          cors: true
  # getProduct:
  #   handler: wsgi_handler.handler
  #   events:
  #     - http:
  #         path: /products/{proxy+}
  #         method: GET
  #         cors: true
  # getAllProducts:
  #   handler: wsgi_handler.handler
  #   events:
  #     - http: 
  #         path: /products
  #         method: GET
  #         cors: true


resources:
  Resources:
    ProductsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: product_id
            AttributeType: S
        KeySchema:
          - AttributeName: product_id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${param:tableProductsName}
    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: ApiGatewayRestApi
